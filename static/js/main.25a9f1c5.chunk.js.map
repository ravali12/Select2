{"version":3,"sources":["components/Select2.js","serviceWorker.js","index.js"],"names":["Select2","props","state","value","handleChange","bind","event","this","setState","target","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAoDeA,G,kBA/Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,MAAO,wBACrB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,0EAUNC,GACVC,KAAKC,SAAS,CAACL,MAAOG,EAAMG,OAAON,U,+BAMpC,OAEE,8BAEA,+BACE,8DAGH,yEAGC,4BAAQA,MAAOI,KAAKL,MAAMC,MAAQO,SAAYH,KAAKH,cACjD,4BAAQD,MAAQ,KAChB,4BAAQA,MAAQ,wBAAhB,wBACA,4BAAQA,MAAQ,4BAAhB,4BACA,4BAAQA,MAAQ,iBAAhB,iBACA,4BAAQA,MAAQ,mBAAhB,mBACA,4BAAQA,MAAQ,qBAAhB,qBACA,4BAAQA,MAAQ,6BAAhB,oC,GApCcQ,IAAMC,YCQRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.25a9f1c5.chunk.js","sourcesContent":["import React from 'react'\r\nimport './myStyles.css'\r\n\r\n\r\nclass Select2 extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: 'Applications Manager'};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    \r\n        \r\n    }\r\n  \r\n  \r\n\r\n  handleChange(event){\r\n     this.setState({value: event.target.value});\r\n  }\r\n    \r\n  \r\n  render(){\r\n    \r\n    return(\r\n      \r\n      <form>\r\n          \r\n      <label>\r\n        <h1>\r\n          Single Select box using react.\r\n        </h1>\r\n     <h3>\r\n     Select your role for the service request.\r\n     </h3>\r\n      <select value={this.state.value}  onChange = {this.handleChange}>\r\n        <option value = \"\"></option>\r\n        <option value = \"Applications Manager\">Applications Manager</option>\r\n        <option value = \"Sr. Applications Manager\">Sr. Applications Manager</option>\r\n        <option value = \"HR Generalist\">HR Generalist</option>\r\n        <option value = \"Product Manager\">Product Manager</option>\r\n        <option value = \"Software Engineer\">Software Engineer</option>\r\n        <option value = \"Quality Assurance Analyst\">Quality Assurance Analyst</option>\r\n        \r\n      </select>\r\n      \r\n</label>\r\n\r\n      \r\n</form>\r\n    );\r\n    \r\n  }\r\n}\r\nexport default Select2;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Select2 from './components/Select2';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Select2 />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}